@using BlazorVirtualGrid.App.Services

<div class="grid-container">
    <div class="grid-wrapper">
    @if (Data == null)
    {
        <Loader></Loader>
    }
    else
    {
        <div class="grid-table" tabindex="0" ref="Grid" style="height: @(Height)px" 
            onmousemove="@OnMouseMove" 
            onmouseup="@OnMouseUp" 
            onmousewheel="@OnMouseWheel"
            onkeydown="@OnKeyDown">
            <CascadingValue Value=this>
                <VGridHeader ref="GridHeader">
                    @ChildContent
                </VGridHeader>
                <VGridBody ref="GridBody"></VGridBody>
                <VGridHScroll ref="GridHScroll"></VGridHScroll>
                <VGridVScroll ref="GridVScroll"></VGridVScroll>
            </CascadingValue>
        </div>
    }
    </div>
</div>

@functions {
    [Parameter] private RenderFragment ChildContent { get; set; }
    [Parameter] private GridModel[] Data { get; set; }

    public GridService gridService;

    ElementRef Grid;
    VGridHeader GridHeader;
    VGridBody GridBody;
    VGridHScroll GridHScroll;
    VGridVScroll GridVScroll;

    int Width;
    int Height;
    bool Rendered = false;

    protected override void OnInit()
    {
        gridService = new GridService();
        base.OnInit();
    }


    protected override void OnParametersSet()
    {
        gridService.SetData(Data);
        base.OnParametersSet();
    }

    protected override async void OnAfterRender()
    {
        if (!Rendered)
        {
            Width = await Grid.GetWidth();
            Height = await Grid.GetHeight();
            gridService.SetDimension(Width, Height);
            Rendered = true;
            StateHasChanged();
        }
        base.OnAfterRender();
    }

    void OnMouseMove(UIMouseEventArgs e)
    {
        int clientX = (int)e.ClientX;
        if (gridService.IsResizing)
        {
            gridService.Resize(clientX);
        }
        if (gridService.IsHScrolling)
        {
            gridService.HScroll(clientX);
        }
        if (gridService.IsVScrolling)
        {
            gridService.VScroll((int)e.ClientY);
        }
    }

    void OnMouseUp()
    {
        gridService.IsResizing = false;
        gridService.IsHScrolling = false;
        gridService.IsVScrolling = false;
    }

    void OnMouseWheel(UIWheelEventArgs e)
    {
        int deltaY = (int)e.DeltaY;
        if (e.ShiftKey)
        {
            gridService.HScrollByWheel(deltaY);
        }
        else
        {
            gridService.VScrollByWeel(deltaY);
        }
    }

    void OnKeyDown(UIKeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "ArrowUp":
                gridService.CursorUp();
                break;
            case "ArrowDown":
                gridService.CursorDown();
                break;
            case "ArrowLeft":
                gridService.CursorLeft();
                break;
            case "ArrowRight":
                gridService.CursorRight();
                break;
        }
    }
}