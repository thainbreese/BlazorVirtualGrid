@using BlazorVirtualGrid.App.Services

<div class="grid-body">
    @if (RenderingData == null || RenderingData.Count() == 0)
    {
        <div>No data</div>
    }
    else
    {
        @for (var i = 0; i < RenderingData.Count(); i++)
        {
            int row = i;
            <div class="grid-body-row @rowSelectedClass(row)" style="top: @(gridService.StartRecordOffset)px">
                <div class="grid-body-item" style="min-width: @(columnWidth(0))px"></div>
                @for (var j = 1; j < gridService.Columns.Count(); j++)
                {
                    int column = j;
                    <div class="grid-body-item @selectedClass(row, column-1) @fixedClass(column)" 
                         style="min-width: @(columnWidth(column))px; left: @(tableLeftPosition(column))px"
                         onclick="@(e => OnItemClick(e, row, column-1))">
                        <div class="grid-item">
                            <span>@rowItem(row, column)</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@functions {
    [CascadingParameter] VGrid ContainerGrid { get; set; }

    GridService gridService { get; set; }

    GridModel[] RenderingData;

    string fixedClass(int column)
    {
        if (gridService.Columns[column].StickToLeft)
            return "stick-left";
        if (gridService.Columns[column].StickToRight)
            return "stick-right";
        return null;
    }

    string rowItem(int row, int column)
    {
        return RenderingData[row].GetType().GetProperty(gridService.Columns[column].Field).GetValue(RenderingData[row]).ToString();
    }

    string rowSelectedClass(int row)
    {
        return gridService.SelectedRow == gridService.StartRecord + row ? "selected" : null;
    }

    string selectedClass(int row, int column)
    {
        return (gridService.SelectedRow == gridService.StartRecord + row && gridService.SelectedColumn == column) ? "selected" : null;
    }

    int tableLeftPosition(int column)
    {
        if (gridService.Columns[column].StickToLeft)
            return 0;
        return gridService.GetTableLeftPosition();
    }

    int columnWidth(int column)
    {
        return gridService.Columns[column].Width;
    }

    protected override void OnInit()
    {
        gridService = ContainerGrid.gridService;
        base.OnInit();
    }

    protected override void OnParametersSet()
    {
        RenderingData = gridService.GetRenderingData();
        base.OnParametersSet();
    }

    void OnItemClick(UIMouseEventArgs e, int row, int column)
    {
        gridService.SelectItem(row, column);
    }
}